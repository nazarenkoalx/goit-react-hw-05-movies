{"version":3,"file":"static/js/550.66803216.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/CastList/CastList.styled.js","components/CastListItem/CastListItem.styled.js","components/CastListItem/CastListItem.js","components/CastList/CastList.js","components/Cast/Cast.js","components/Toasts/Toasts.js","services/serviceAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastTitle = styled.h3`\n  margin-top: 20px;\n  font-size: 20px;\n  display: block;\n`;\n\n","import styled from 'styled-components';\n\nexport const CastListStyled = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-top: 20px;\n  justify-content: space-between;\n`;\n","import styled from 'styled-components';\n\nexport const CastItemStyled = styled.li`\n  display: flex;\n  flex-direction: column;\n  border: 1px solid black;\n  width: 220px;\n`;\n\nexport const ActorPortrait = styled.img`\n  width: 100%;\n`;\n\nexport const ActorCredits = styled.div`\n  padding: 10px;\n`;\n","import {\n  ActorCredits,\n  ActorPortrait,\n  CastItemStyled,\n} from './CastListItem.styled';\nimport PropTypes from 'prop-types';\n\nexport const CastListItem = ({ actorPhotoPath, name, character }) => {\n  return (\n    <CastItemStyled>\n      <ActorPortrait src={actorPhotoPath} loading=\"lazy\" alt={name} />\n      <ActorCredits>\n        <p>Actor: {name}</p>\n        <p>Role: {character}</p>\n      </ActorCredits>\n    </CastItemStyled>\n  );\n};\n\nCastListItem.propTypes = {\n  actorPhotoPath: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  character: PropTypes.string.isRequired,\n};\n","import { CastListStyled } from './CastList.styled';\nimport { CastListItem } from 'components/CastListItem/CastListItem';\nimport noPhoto from '../../images/no-photo.png';\nimport PropTypes from 'prop-types';\n\nexport const CastList = ({ cast }) => {\n  return (\n    cast.length > 0 && (\n      <CastListStyled>\n        {cast.map(({ id, character, name, profile_path }) => {\n          const posterBaseUrl = 'https://www.themoviedb.org/t/p/w500';\n          const actorPhotoPath =\n            profile_path === null\n              ? `${noPhoto}`\n              : `${posterBaseUrl}${profile_path}`;\n          return (\n            <CastListItem\n              key={id}\n              character={character}\n              name={name}\n              actorPhotoPath={actorPhotoPath}\n            />\n          );\n        })}\n      </CastListStyled>\n    )\n  );\n};\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      character: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { getCastById } from 'services/serviceAPI';\nimport { CastTitle } from './Cast.styled';\nimport { CastList } from 'components/CastList/CastList';\nimport { errorToast } from '../Toasts/Toasts';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    setCast([]);\n    setError('');\n    setLoading(true);\n    getCastById(id)\n      .then(data => {\n        if (data.length === 0) {\n          return errorToast('Unfortunately there is no info about movie cast');\n        }\n        setCast(data);\n      })\n      .catch(error => setError(error))\n      .finally(() => setLoading(false));\n  }, [id]);\n\n  useEffect(() => {\n    if (error !== '') {\n      errorToast(\n        'smth went wrong, redirecting to the main page, wait a second pls'\n      );\n      setTimeout(() => {\n        navigate(`/movies/${id}`);\n      }, 2000);\n    }\n  }, [error, id, navigate]);\n\n  return (\n    <>\n      {error && <div>smth went wrong</div>}\n      {loading && <Loader />}\n      {cast.length && (\n        <>\n          <CastTitle>Cast list:</CastTitle>\n          <CastList cast={cast} />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import { toast } from 'react-toastify';\n\nexport const errorToast = string =>\n  toast.error(`${string}`, {\n    position: 'top-right',\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: 'dark',\n  });\n","import axios from 'axios';\n\nconst API_KEY = 'd60997a7e23cda835c1c23368c69f903';\n\nexport async function getTrendingMovies() {\n  try {\n    const { data } = await axios.get(\n      'https://api.themoviedb.org/3/trending/movie/week',\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n    const normalisedMovies = data.results.map(\n      ({ id, title, poster_path, vote_average, genre_ids }) => ({\n        id,\n        title,\n        poster_path,\n        vote_average,\n      })\n    );\n    return normalisedMovies;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nexport async function searchMovies(searchQuery) {\n  try {\n    const { data } = await axios.get(\n      'https://api.themoviedb.org/3/search/movie',\n      {\n        params: {\n          api_key: API_KEY,\n          language: 'en-US',\n          page: 1,\n          include_adult: false,\n          query: searchQuery,\n        },\n      }\n    );\n    const normalisedMovies = data.results.map(\n      ({ id, title, poster_path, vote_average, genre_ids }) => ({\n        id,\n        title,\n        poster_path,\n        vote_average,\n      })\n    );\n    return normalisedMovies;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nexport async function getMovieById(id) {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}`,\n      {\n        params: {\n          api_key: API_KEY,\n          language: 'en-US',\n        },\n      }\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nexport async function getCastById(id) {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/credits`,\n      {\n        params: {\n          api_key: API_KEY,\n          language: 'en-US',\n        },\n      }\n    );\n    const cast = data.cast.map(({ id, character, name, profile_path }) => {\n      return { id, character, name, profile_path };\n    });\n\n    return cast;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nexport async function getReviewsById(id) {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews`,\n      {\n        params: {\n          api_key: API_KEY,\n          language: 'en-US',\n          page: 1,\n        },\n      }\n    );\n    const reviews = data.results.map(({ author, content, created_at }) => {\n      return { author, content, created_at };\n    });\n    return reviews;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n"],"names":["CastTitle","styled","CastListStyled","CastItemStyled","ActorPortrait","ActorCredits","CastListItem","actorPhotoPath","name","character","src","loading","alt","CastList","cast","length","map","id","profile_path","noPhoto","useState","setCast","error","setError","setLoading","useParams","navigate","useNavigate","useEffect","getCastById","then","data","errorToast","catch","finally","setTimeout","Loader","string","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","API_KEY","getTrendingMovies","axios","params","api_key","normalisedMovies","results","title","poster_path","vote_average","genre_ids","Error","searchMovies","searchQuery","language","page","include_adult","query","getMovieById","getReviewsById","reviews","author","content","created_at"],"sourceRoot":""}