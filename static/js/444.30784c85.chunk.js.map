{"version":3,"file":"static/js/444.30784c85.chunk.js","mappings":"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","sources":["components/FilmListItem/FilmListItem.styled.js","components/FilmListItem/FilmList.Item.js","components/FilmList/FilmList.styled.js","components/FilmList/FilmList.js","components/Toasts/Toasts.js","components/TrendingMovies/TrendingMovies.js","components/Title/Title.js","pages/Home.js","services/serviceAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MovieCard = styled.li`\n  max-width: 280px;\n  margin-bottom: 15px;\n  list-style: none;\n`;\n","import noPhoto from '../../images/no-photo.png';\nimport { MovieCard } from './FilmListItem.styled';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const FilmListItem = ({ id, title, poster_path }) => {\n  const posterBaseUrl = 'https://www.themoviedb.org/t/p/w500';\n  const posterPath =\n    poster_path === null ? `${noPhoto}` : `${posterBaseUrl}${poster_path}`;\n  const location = useLocation();\n\n  return (\n    <MovieCard>\n      <Link to={`/movies/${id}`} state={{ from: location }}>\n        <article>\n          <img src={posterPath} loading=\"lazy\" alt={title} />\n          <h2>{title}</h2>\n        </article>\n      </Link>\n    </MovieCard>\n  );\n};\n\nFilmListItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  poster_path: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const MovieList = styled.div`\n  display: flex;\n\n  flex-wrap: wrap;\n  justify-content: space-between;\n`;\n","import { FilmListItem } from 'components/FilmListItem/FilmList.Item';\nimport { MovieList } from './FilmList.styled';\nimport PropTypes from 'prop-types';\n\nexport const FilmList = ({ movies }) => {\n  return (\n    <MovieList>\n      {movies.map(movie => {\n        const { id, title, poster_path } = movie;\n\n        return (\n          <FilmListItem\n            key={id}\n            id={id}\n            title={title}\n            poster_path={poster_path}\n          />\n        );\n      })}\n    </MovieList>\n  );\n};\n\nFilmList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","import { toast } from 'react-toastify';\n\nexport const errorToast = string =>\n  toast.error(`${string}`, {\n    position: 'top-right',\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: 'dark',\n  });\n","import { useEffect, useState } from 'react';\nimport { getTrendingMovies } from 'services/serviceAPI';\nimport { FilmList } from 'components/FilmList/FilmList';\nimport { Loader } from 'components/Loader/Loader';\nimport { errorToast } from 'components/Toasts/Toasts';\n\nexport const TrendingMovies = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setMovies([]);\n    setError('');\n    setLoading(true);\n    getTrendingMovies()\n      .then(normalisedMovies => {\n        if (normalisedMovies.length === 0) {\n          return errorToast('There are no trending within today info(');\n        }\n        setMovies(normalisedMovies);\n      })\n      .catch(error => setError(error))\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <>\n      {movies.length > 0 && <FilmList movies={movies} />}\n      {loading && <Loader />}\n      {error && <div>smth went wrong</div>}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  font-size: 30px;\n  text-align: center;\n  margin-top: 20px;\n  margin-bottom: 10px;\n`;\n","import { TrendingMovies } from 'components/TrendingMovies/TrendingMovies';\nimport { Title } from 'components/Title/Title';\n\nconst Home = () => {\n  return (\n    <main>\n      <Title> Trending movies, last week:</Title>\n      <TrendingMovies />\n    </main>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst API_KEY = 'd60997a7e23cda835c1c23368c69f903';\n\nexport async function getTrendingMovies() {\n  try {\n    const { data } = await axios.get(\n      'https://api.themoviedb.org/3/trending/movie/week',\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n    const normalisedMovies = data.results.map(\n      ({ id, title, poster_path, vote_average, genre_ids }) => ({\n        id,\n        title,\n        poster_path,\n        vote_average,\n      })\n    );\n    return normalisedMovies;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nexport async function searchMovies(searchQuery) {\n  try {\n    const { data } = await axios.get(\n      'https://api.themoviedb.org/3/search/movie',\n      {\n        params: {\n          api_key: API_KEY,\n          language: 'en-US',\n          page: 1,\n          include_adult: false,\n          query: searchQuery,\n        },\n      }\n    );\n    const normalisedMovies = data.results.map(\n      ({ id, title, poster_path, vote_average, genre_ids }) => ({\n        id,\n        title,\n        poster_path,\n        vote_average,\n      })\n    );\n    return normalisedMovies;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nexport async function getMovieById(id) {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}`,\n      {\n        params: {\n          api_key: API_KEY,\n          language: 'en-US',\n        },\n      }\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nexport async function getCastById(id) {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/credits`,\n      {\n        params: {\n          api_key: API_KEY,\n          language: 'en-US',\n        },\n      }\n    );\n    const cast = data.cast.map(({ id, character, name, profile_path }) => {\n      return { id, character, name, profile_path };\n    });\n\n    return cast;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nexport async function getReviewsById(id) {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews`,\n      {\n        params: {\n          api_key: API_KEY,\n          language: 'en-US',\n          page: 1,\n        },\n      }\n    );\n    const reviews = data.results.map(({ author, content, created_at }) => {\n      return { author, content, created_at };\n    });\n    return reviews;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n"],"names":["MovieCard","styled","FilmListItem","id","title","poster_path","posterPath","noPhoto","location","useLocation","to","state","from","src","loading","alt","MovieList","FilmList","movies","map","movie","errorToast","string","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","TrendingMovies","useState","setMovies","error","setError","setLoading","useEffect","getTrendingMovies","then","normalisedMovies","length","catch","finally","Loader","Title","API_KEY","axios","params","api_key","data","results","vote_average","genre_ids","Error","searchMovies","searchQuery","language","page","include_adult","query","getMovieById","getCastById","cast","character","name","profile_path","getReviewsById","reviews","author","content","created_at"],"sourceRoot":""}